generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  OWNER
  MANAGER
  EMPLOYEE
  CUSTOMER
}

model Document {
  id       String @id @default(cuid())
  name     String
  url      String
  publicId String
  type     String
  size     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  material   Material?
  inmetros   Equipament? @relation("inmetro")
  datasheets Equipament? @relation("datasheet")

  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  work          Work?        @relation(fields: [workId], references: [id])
  workId        String?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?
}

model Address {
  id           String  @id @default(cuid())
  zipCode      String
  street       String
  neighborhood String
  city         String
  state        String
  number       String?
  complement   String?

  userId       String?     @unique
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  enterpriseId String?     @unique
  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  workId       String?     @unique
  workd        Work?       @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model EnterpriseOwner {
  userId       String
  enterpriseId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  @@id([userId, enterpriseId])
}

model Enterprise {
  id       String @id @default(cuid())
  name     String
  email    String
  cpfCnpj  String
  whatsApp String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  owners  EnterpriseOwner[]
  members User[]            @relation("members")
  users   User[]            @relation("selectedEnterprise")
  teams   Team[]

  categories  Category[]
  measures    Measure[]
  materials   Material[]
  equipaments Equipament[]

  works        Work[]
  transactions Transaction[]
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String
  whatsApp String
  cpfCnpj  String
  role     UserRole
  status   Boolean  @default(true)

  password           String?
  hasAcceptedTerms   Boolean @default(true)
  isTwoFactorEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String?
  owner   User?      @relation("users", fields: [ownerId], references: [id])
  users   User[]     @relation("users")
  teams   TeamUser[]

  enterpriseOwners   EnterpriseOwner[]
  enterpriseBelongId String?
  enterpriseBelong   Enterprise?       @relation("members", fields: [enterpriseBelongId], references: [id])

  selectedEnterprise String?
  enterprise         Enterprise? @relation("selectedEnterprise", fields: [selectedEnterprise], references: [id])

  address               Address?
  twoFactorConfirmation TwoFactorConfirmation?

  documents Document[]

  customerWorks    Work[] @relation("customer")
  responsibleWorks Work[] @relation("responsible")
  designerWorks    Work[] @relation("designer")

  @@unique([email, role], name: "unique_email_per_role")
  @@unique([email, role, enterpriseBelongId], name: "unique_email_role_per_enterprise")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id     String  @id @default(cuid())
  name   String
  status Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  materials Material[]

  @@unique([name, enterpriseId], name: "unique_name_per_enterprise")
}

model Measure {
  id     String  @id @default(cuid())
  name   String
  status Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  materials Material[]

  @@unique([name, enterpriseId], name: "unique_name_per_enterprise")
}

model Material {
  id       String  @id @default(cuid())
  name     String
  amount   Int
  stock    Int
  supplier String?
  obs      String?
  status   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  measureId  String?
  measure    Measure?  @relation(fields: [measureId], references: [id], onDelete: SetNull)
  documentId String?   @unique
  document   Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  works WorkMaterial[]

  @@unique([name, enterpriseId], name: "unique_name_per_enterprise")
}

enum EquipamentRole {
  PLATE
  INVERTER
}

model Equipament {
  id       String         @id @default(cuid())
  name     String
  supplier String
  power    Int
  role     EquipamentRole @default(PLATE)
  sales    Int            @default(0)
  obs      String?
  status   Boolean        @default(true)

  voc Int?
  isc Int?
  vmp Int?
  imp Int?

  circuitBreaker Int?
  mppt           Int?
  quantityString Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  inmetroId   String?   @unique
  inmetro     Document? @relation("inmetro", fields: [inmetroId], references: [id], onDelete: SetNull)
  datasheetId String?   @unique
  datasheet   Document? @relation("datasheet", fields: [datasheetId], references: [id], onDelete: SetNull)

  works WorkEquipament[]

  @@unique([name, role, enterpriseId], name: "unique_name_role_per_enterprise")
}

model TeamUser {
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@id([teamId, userId])
}

model Team {
  id     String  @id @default(cuid())
  name   String
  obs    String?
  status Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)

  users TeamUser[]
  works WorkTeam[]
}

enum WorkRole {
  INPROGRESS
  COMPLETED
  CANCELLED
}

model WorkTeam {
  workId String
  work   Work   @relation(fields: [workId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([workId, teamId])
}

model WorkMaterial {
  workId     String
  work       Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  materialId String
  material   Material @relation(fields: [materialId], references: [id], onDelete: NoAction)
  quantity   Int
  amount     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workId, materialId])
}

model WorkEquipament {
  workId       String
  work         Work       @relation(fields: [workId], references: [id], onDelete: NoAction)
  equipamentId String
  equipament   Equipament @relation(fields: [equipamentId], references: [id], onDelete: NoAction)
  quantity     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workId, equipamentId])
}

model Transaction {
  id     String @id @default(cuid())
  name   String
  amount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  workId       String
  work         Work       @relation(fields: [workId], references: [id], onDelete: Cascade)

  documents Document[]
}

model Work {
  id     String @id @default(cuid())
  cod    Int    @default(autoincrement())
  amount Int

  circuitBreaker    Int?
  uc                String?
  isAddressCustomer Boolean @default(true)

  coordinates String?
  xLat        String?
  yLat        String?
  lat         String?
  long        String?
  obs         String?
  status      Boolean @default(true)
  role WorkRole @default(INPROGRESS)

  orderDate             DateTime?
  equipamentArrivalDate DateTime?
  startDateOfWork       DateTime?
  approvalDate          DateTime?
  deliveryDate          DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  enterpriseId  String
  enterprise    Enterprise @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  customerId    String
  customer      User       @relation("customer", fields: [customerId], references: [id], onDelete: NoAction)
  responsibleId String
  responsible   User       @relation("responsible", fields: [responsibleId], references: [id], onDelete: NoAction)
  designerId    String
  designer      User       @relation("designer", fields: [designerId], references: [id], onDelete: NoAction)

  documents    Document[]
  teams        WorkTeam[]
  materials    WorkMaterial[]
  equipaments  WorkEquipament[]
  transactions Transaction[]
}
